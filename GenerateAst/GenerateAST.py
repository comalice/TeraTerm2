import click


@click.command()
@click.argument("output_dir", type=click.Path(exists=True))
def main(output_dir):
    define_ast(output_dir, "Expr", [
        "Binary   : Expr Left, Token _Operator, Expr Right",
        "Grouping : Expr Expression",
        "Literal  : object Value",
        "Unary    : Token _Operator, Expr Right"
    ])


def define_ast(output_dir: str, base_name: str, types: list):
    path = f"{output_dir}/{base_name}.cs"
    with open(path, "w") as f:
        f.write("/// This file is generated by GenerateAST.py -- DO NOT ALTER\n")
        f.write("using System.Collections.Generic;\n\n")
        f.write("namespace TeraTerm2;\n\n")

        # Visitor pattern
        define_visitor(f, base_name, types)
 
        f.write(f"public abstract class {base_name}\n")
        f.write("{\n")

        # AST classes
        for _type in types:
            class_name = _type.split(":")[0].strip()
            fields = _type.split(":")[1].strip()
            define_type(f, base_name, class_name, fields)

        # Base accept() method 
        f.write("    public abstract T Accept<T>(IVisitor<T> visitor);\n")

        f.write("}\n")


def define_visitor(writer, base_name: str, types: list):
    writer.write("public interface IVisitor<T>\n")
    writer.write("{\n")

    for _type in types:
        type_name = _type.split(":")[0].strip()
        writer.write(f"    T Visit{type_name}{base_name}(Expr.{type_name} {base_name.lower()});\n")

    writer.write("}\n")
    writer.write("\n")


def define_type(writer, base_name: str, class_name: str, field_list: str):
    writer.write(f"    public class {class_name} : {base_name}\n")
    writer.write("    {\n")

    # Constructor
    writer.write(f"        public {class_name}({field_list})\n")
    writer.write("        {\n")

    # Store parameters in fields
    fields = field_list.split(", ")
    for field in fields:
        name = field.split(" ")[1]
        writer.write(f"            this.{name} = {name};\n")

    writer.write("        }\n")

    # Visitor pattern
    writer.write("\n")
    writer.write("        public override T Accept<T>(IVisitor<T> visitor)\n")
    writer.write("        {\n")
    writer.write(f"            return visitor.Visit{class_name}{base_name}(this);\n")
    writer.write("        }\n")

    # Fields
    writer.write("\n")
    for field in fields:
        writer.write(f"        public readonly {field};\n")

    writer.write("    }\n")
    writer.write("\n")


if __name__ == "__main__":
    main()
