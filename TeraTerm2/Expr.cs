/// This file is generated by GenerateAST.py -- DO NOT ALTER
using System.Collections.Generic;

namespace TeraTerm2;

public interface IVisitor<T>
{
    T VisitBinaryExpr(Expr.Binary expr);
    T VisitGroupingExpr(Expr.Grouping expr);
    T VisitLiteralExpr(Expr.Literal expr);
    T VisitUnaryExpr(Expr.Unary expr);
}

public abstract class Expr
{
    public class Binary : Expr
    {
        public Binary(Expr Left, Token _Operator, Expr Right)
        {
            this.Left = Left;
            this._Operator = _Operator;
            this.Right = Right;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitBinaryExpr(this);
        }

        public readonly Expr Left;
        public readonly Token _Operator;
        public readonly Expr Right;
    }

    public class Grouping : Expr
    {
        public Grouping(Expr Expression)
        {
            this.Expression = Expression;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitGroupingExpr(this);
        }

        public readonly Expr Expression;
    }

    public class Literal : Expr
    {
        public Literal(object Value)
        {
            this.Value = Value;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitLiteralExpr(this);
        }

        public readonly object Value;
    }

    public class Unary : Expr
    {
        public Unary(Token _Operator, Expr Right)
        {
            this._Operator = _Operator;
            this.Right = Right;
        }

        public override T Accept<T>(IVisitor<T> visitor)
        {
            return visitor.VisitUnaryExpr(this);
        }

        public readonly Token _Operator;
        public readonly Expr Right;
    }

    public abstract T Accept<T>(IVisitor<T> visitor);
}
